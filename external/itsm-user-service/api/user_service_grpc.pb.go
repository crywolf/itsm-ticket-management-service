// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package usermanagement

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagementServiceClient is the client API for UserManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementServiceClient interface {
	UserGetMyPersonalDetails(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error)
	UserGet(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error)
	UserInvalidateCache(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UserCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error)
	UserUpdate(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error)
	UserSetPricing(ctx context.Context, in *PricingPolicyRequest, opts ...grpc.CallOption) (*PricingPolicyResponse, error)
	UserGetPricing(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*PricingPolicyResponse, error)
}

type userManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementServiceClient(cc grpc.ClientConnInterface) UserManagementServiceClient {
	return &userManagementServiceClient{cc}
}

func (c *userManagementServiceClient) UserGetMyPersonalDetails(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error) {
	out := new(UserPersonalDetailsResponse)
	err := c.cc.Invoke(ctx, "/usermanagement.UserManagementService/UserGetMyPersonalDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserGet(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error) {
	out := new(UserPersonalDetailsResponse)
	err := c.cc.Invoke(ctx, "/usermanagement.UserManagementService/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserInvalidateCache(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/usermanagement.UserManagementService/UserInvalidateCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error) {
	out := new(UserPersonalDetailsResponse)
	err := c.cc.Invoke(ctx, "/usermanagement.UserManagementService/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserUpdate(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserPersonalDetailsResponse, error) {
	out := new(UserPersonalDetailsResponse)
	err := c.cc.Invoke(ctx, "/usermanagement.UserManagementService/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserSetPricing(ctx context.Context, in *PricingPolicyRequest, opts ...grpc.CallOption) (*PricingPolicyResponse, error) {
	out := new(PricingPolicyResponse)
	err := c.cc.Invoke(ctx, "/usermanagement.UserManagementService/UserSetPricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserGetPricing(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*PricingPolicyResponse, error) {
	out := new(PricingPolicyResponse)
	err := c.cc.Invoke(ctx, "/usermanagement.UserManagementService/UserGetPricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementServiceServer is the server API for UserManagementService service.
// All implementations must embed UnimplementedUserManagementServiceServer
// for forward compatibility
type UserManagementServiceServer interface {
	UserGetMyPersonalDetails(context.Context, *empty.Empty) (*UserPersonalDetailsResponse, error)
	UserGet(context.Context, *UserRequest) (*UserPersonalDetailsResponse, error)
	UserInvalidateCache(context.Context, *UserRequest) (*empty.Empty, error)
	UserCreate(context.Context, *User) (*UserPersonalDetailsResponse, error)
	UserUpdate(context.Context, *User) (*UserPersonalDetailsResponse, error)
	UserSetPricing(context.Context, *PricingPolicyRequest) (*PricingPolicyResponse, error)
	UserGetPricing(context.Context, *UserRequest) (*PricingPolicyResponse, error)
	mustEmbedUnimplementedUserManagementServiceServer()
}

// UnimplementedUserManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagementServiceServer struct {
}

func (UnimplementedUserManagementServiceServer) UserGetMyPersonalDetails(context.Context, *empty.Empty) (*UserPersonalDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetMyPersonalDetails not implemented")
}
func (UnimplementedUserManagementServiceServer) UserGet(context.Context, *UserRequest) (*UserPersonalDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (UnimplementedUserManagementServiceServer) UserInvalidateCache(context.Context, *UserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInvalidateCache not implemented")
}
func (UnimplementedUserManagementServiceServer) UserCreate(context.Context, *User) (*UserPersonalDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedUserManagementServiceServer) UserUpdate(context.Context, *User) (*UserPersonalDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (UnimplementedUserManagementServiceServer) UserSetPricing(context.Context, *PricingPolicyRequest) (*PricingPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetPricing not implemented")
}
func (UnimplementedUserManagementServiceServer) UserGetPricing(context.Context, *UserRequest) (*PricingPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetPricing not implemented")
}
func (UnimplementedUserManagementServiceServer) mustEmbedUnimplementedUserManagementServiceServer() {}

// UnsafeUserManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServiceServer will
// result in compilation errors.
type UnsafeUserManagementServiceServer interface {
	mustEmbedUnimplementedUserManagementServiceServer()
}

func RegisterUserManagementServiceServer(s grpc.ServiceRegistrar, srv UserManagementServiceServer) {
	s.RegisterService(&UserManagementService_ServiceDesc, srv)
}

func _UserManagementService_UserGetMyPersonalDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserGetMyPersonalDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermanagement.UserManagementService/UserGetMyPersonalDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserGetMyPersonalDetails(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermanagement.UserManagementService/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserGet(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserInvalidateCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserInvalidateCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermanagement.UserManagementService/UserInvalidateCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserInvalidateCache(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermanagement.UserManagementService/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserCreate(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermanagement.UserManagementService/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserUpdate(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserSetPricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricingPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserSetPricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermanagement.UserManagementService/UserSetPricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserSetPricing(ctx, req.(*PricingPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserGetPricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserGetPricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermanagement.UserManagementService/UserGetPricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserGetPricing(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagementService_ServiceDesc is the grpc.ServiceDesc for UserManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermanagement.UserManagementService",
	HandlerType: (*UserManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserGetMyPersonalDetails",
			Handler:    _UserManagementService_UserGetMyPersonalDetails_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _UserManagementService_UserGet_Handler,
		},
		{
			MethodName: "UserInvalidateCache",
			Handler:    _UserManagementService_UserInvalidateCache_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _UserManagementService_UserCreate_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _UserManagementService_UserUpdate_Handler,
		},
		{
			MethodName: "UserSetPricing",
			Handler:    _UserManagementService_UserSetPricing_Handler,
		},
		{
			MethodName: "UserGetPricing",
			Handler:    _UserManagementService_UserGetPricing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/userservice/user_service.proto",
}
